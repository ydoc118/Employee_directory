{"version":3,"sources":["utils/API.js","components/Search.js","components/Card.js","components/Employees.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","Search","props","className","htmlFor","onChange","handleInputChange","value","name","type","placeholder","id","onClick","handleFormSubmit","Card","src","picture","alt","firstName","lastName","dob","email","phone","Employees","state","result","search","searchEmployees","query","console","log","API","then","res","setState","data","results","map","medium","first","last","age","event","target","preventDefault","catch","err","this","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2b198c13.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default {\r\n  // Gets all users\r\n  getUsers: function() {\r\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n  }\r\n};","import React from \"react\";\r\n\r\nfunction Search(props) {\r\n  return (\r\n    <form>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"search\">Search:</label>\r\n        <input\r\n          onChange={props.handleInputChange}\r\n          value={props.value}\r\n          name=\"search\"\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"Search Employees\"\r\n          id=\"search\"\r\n        />\r\n        <br />\r\n        <button onClick={props.handleFormSubmit} className=\"btn btn-primary\">\r\n          Search\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Search;","import React from \"react\";\r\n\r\nfunction Card(props) {\r\n  return (\r\n    <tr>\r\n        <td> <img src={props.picture} alt=\"\" /></td>  \r\n        <td>{props.firstName}</td>\r\n        <td>{props.lastName}</td>\r\n        <td>{props.dob}</td>\r\n        <td>{props.email}</td>\r\n        <td>{props.phone}</td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nexport default Card;","import React, { Component } from \"react\";\r\nimport API from \"../utils/API\";\r\nimport Search from \"./Search\";\r\nimport Card from \"./Card\";\r\n\r\nclass Employees extends Component {\r\n    state = {\r\n        result: [],\r\n        search: \"\"\r\n    }\r\n    componentDidMount() {\r\n        API.getUsers()\r\n            .then(res => this.setState({ \r\n                 result: res.data.results.map((res) => ({\r\n                    picture: res.picture.medium,\r\n                    firstName: res.name.first,\r\n                    lastName: res.name.last,\r\n                    dob: res.dob.age,\r\n                    email: res.email,\r\n                    phone: res.phone\r\n            }))\r\n        }))\r\n        .catch(err => console.log(err));\r\n    \r\n    }\r\n\r\n    searchEmployees = query => {\r\n        console.log(query)\r\n        API.getUsers(query)\r\n            .then(res => this.setState({ \r\n                result: res.data.results.map(res => ({\r\n                    picture: res.picture.medium,\r\n                    firstName: res.name.first,\r\n                    lastName: res.name.last,\r\n                    dob: res.dob.age,\r\n                    email: res.email,\r\n                    phone: res.phone\r\n                }))\r\n            }))\r\n    }\r\n\r\n    handleInputChange = event => {\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n    \r\n        this.setState({\r\n          [name]: value\r\n        });\r\n    };\r\n\r\n    handleFormSubmit = event => {\r\n        event.preventDefault();\r\n        this.searchEmployees(this.state.search)\r\n    }\r\n    \r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <h1>Employee Directory</h1>\r\n                <Search \r\n                    value={this.state.search}\r\n                    handleInputChange={this.handleInputChange}\r\n                    handleFormSubmit={this.handleFormSubmit}\r\n\r\n                />\r\n                {this.state.result.map((res) => \r\n                <Card \r\n                    picture={res.picture}\r\n                    firstName={res.firstName}\r\n                    lastName={res.lastName}\r\n                    dob={res.dob}\r\n                    email={res.email}\r\n                    phone={res.phone}\r\n                />\r\n                )}\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Employees;\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Employees from \"./components/Employees\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Employees />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}